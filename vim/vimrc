" -------------------------------------------------------------------
" .vimrc
" Maintained by: Matthew Strickland
" matthew@redcrown.co
" http://redcrown.co
" -------------------------------------------------------------------
" -------------------------------------------------------------------

" Use before config {
if filereadable(expand("~/.vim/vimrc.before"))
    source ~/.vim/vimrc.before
endif
" }


" -------------------------------------------------------------------
" FORGET COMPATIBILITY WITH VI. WHO CARES?
" -------------------------------------------------------------------
set nocompatible

" -------------------------------------------------------------------
" GET SID PREFIX OF VIMRC (SEE :H <SID>)
" -------------------------------------------------------------------
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_')
endfunction


" -------------------------------------------------------------------
" SETUP VUNDLE TO MANAGE PLUGINS
" -------------------------------------------------------------------
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

if filereadable(expand("~/.vim/vimrc.bundles"))
    source ~/.vim/vimrc.bundles
endif

filetype plugin indent on          " enable plugins, detections, indenting
syntax on


" -------------------------------------------------------------------
" COLOR SCHEME AND APPEARANCE
" -------------------------------------------------------------------
"set term=builtin_ansi
set nonu
set t_Co=256
set background=dark
colorscheme molokai


" -------------------------------------------------------------------
" CHANGE LEADER KEY
" -------------------------------------------------------------------
let mapleader = ","


" -------------------------------------------------------------------
" TIME OUT MAPPINGS FOR MAPPINGS AND KEY CODES
" -------------------------------------------------------------------
set timeout timeoutlen=1000 ttimeoutlen=800


" -------------------------------------------------------------------
" BASIC OPTIONS
" -------------------------------------------------------------------
"set cmdheight=1                " and use a two-linee tall status line
set noshowmode                 " don't show the mode, vim-airline will do that
set autoindent                 " turn it on
set smartindent                " does the right thing in programs
set linespace=0                " prefer a slightly higher line height
set wrap                       " use line wrapping
set textwidth=79               " at column 79

if has('cmdline_info')
    "set ruler   " display current cursor position
    "set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
    "set showcmd  " show the command

endif

if has('statusline')
   set laststatus=2

   " broken down into easily includeable segments
   "set statusline=%<%f\                     " filename
   "set statusline=%w%h%m%r                 " options
   "set statusline+=%{fugitive#statusline()} " git hotness
   "set statusline+=\ [%{&ff}/%Y]            " filetype
   "set statusline+=\ [%{getcwd()}]          " current dir
   "set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " right aligned file nav info
endif

set showmatch                  " show matching brackets
set relativenumber             " use relative line numbers
set number                     " except for the current line - absolute number there
set backspace=indent,eol,start " make backspace behave
set mousehide                  " hide mouse when typing
set foldenable                 " enable code folding
set magic
set hid
set t_vb=
set tm=500
set history=1000
set ffs=unix,mac,dos           " default file types
set autoread                   " automatically update file when editted outside of Vim
set nojoinspaces               " prevents inserting two spaces after punctuation on a join (J)
set splitright                 " puts new vsplit windows to the right of the current
set splitbelow                 " puts new split windows to the bottom of the current
set list                                       " show invisible characters
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " highlight problematic whitespace

" code folding options
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

" find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" setup automatic text formatting/wrapping
set formatoptions=
set formatoptions-=t           " don't autowrap text
set formatoptions+=c           " do autowrap comments
set formatoptions+=r           " automatically continue comments
set formatoptions+=o           " automatically continue comments when hitting 'o' or 'O'
set formatoptions+=q           " allow formatting of comments with 'gq'
set formatoptions+=n           " recognize numbered lists
set formatoptions+=l           " don't breal long lines that were already there


" -------------------------------------------------------------------
" TAB STUFF
" -------------------------------------------------------------------
set tabstop=4                  " 2 spaces for a tab
set shiftwidth=4               " 2 spaces for autoindenting
set softtabstop=4              " when <BS>, pretend a tab is removed even if spaces
set expandtab                  " expand tabs to spaces (overloadable by file type)


" -------------------------------------------------------------------
" NAVIGATION AND MOVEMENT
" -------------------------------------------------------------------
imap jk <esc>
nnoremap ; :

" disable up, down arrows
map <up> <nop>
map <down> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" map right, left arrows to chaning buffers
map <right> :bn<cr>
map <left>  :bp<cr>

" Use <C>hjkl to switch between splits
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l


" -------------------------------------------------------------------
" Shortcuts
" -------------------------------------------------------------------
" change working directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" visual shifting (does not exit visual mode)
vnoremap < <gv
vnoremap > >gv
vnoremap . :normal .<CR>

" for when your forget to sudo.. really write the file.
cmap w!! w !sudo tee % >/dev/null

" map <Leader>ff to display all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr . "[\t"<CR>

" easier horizontal scrolling
map zl zL
map zh zH


" -------------------------------------------------------------------
" OmniComplete 
" -------------------------------------------------------------------
hi Pmenu ctermfg=black ctermbg=gray
hi PmenuSel ctermfg=darkcyan ctermbg=black
hi PmenuSbar guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
hi PmenuThumb guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

set completeopt=menu,preview,longest

" Enable omni completion
autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby          setlocal omnifunc=rubycomplete#Complete


" -------------------------------------------------------------------
" SuperTab
" -------------------------------------------------------------------
let g:SuperTabDefaultCompletionType = "context"


" -------------------------------------------------------------------
" Tabularize
" -------------------------------------------------------------------
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>


" -------------------------------------------------------------------
" ctrlp
" -------------------------------------------------------------------
let g:ctrlp_working_path_mode = 'ra'
nnoremap <silent> <D-t> :CtrlP<CR>
nnoremap <silent> <D-r> :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':   '\.git$\|\.hg$\|\.svn$',
    \ 'file':  '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")': ['<c-j>', '<c-n>'],
    \ 'PrtSelectMove("k")': ['<c-k>', '<c-p>'],
    \ 'PrtHistory(-1)':     ['<down>'],
    \ 'PrtHistory(1)':      ['<up>'],
    \ }


" -------------------------------------------------------------------
" VIM-AIRLINE
" -------------------------------------------------------------------
let g:airline_theme                                     = 'murmur' " badwolf, murmur, luna, tomorrow, powerlineish, lucius
let g:airline_enable_branch                             = 1
let g:airline_detect_paste                              = 1
let g:airline#extensions#bufferline#enabled             = 1
let g:airline#extensions#bufferline#overwrite_variables = 1
let g:airline#extensions#syntastic#enabled              = 1
let g:airline#extensions#branch#enabled                 = 1
let g:airline#extensions#tabline#enabled                = 1
let g:airline#extensions#tabline#show_buffers           = 1
let g:airline#extensions#branch#empty_message           = ' -- '
let g:airline_section_c                                 = '%{getcwd()}/%t'

" vim-powerline symbols
let g:airline_left_sep          = ''
let g:airline_left_alt_sep      = ''
let g:airline_right_sep         = ''
let g:airline_right_alt_sep     = ''
let g:airline_branch_prefix     = ''
let g:airline_readonly_symbol   = ''
let g:airline_linecolumn_prefix = ''

if !exists('g:airline_powerline_fonts')
    " use the default set of separators with a few cusomizations
    let g:airline_left_sep='›'    " slightly fancier than '>'
    let g:airline_right_sep='‹'   " slightly fancier than '<
endi


" -------------------------------------------------------------------
" EMMET-VIM
" -------------------------------------------------------------------
let g:user_emmet_expandabbr_key = '<C-e>'


" -------------------------------------------------------------------
" FUGITIVE
" -------------------------------------------------------------------
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Gpush<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gg :SignifyToggle<CR>


" -------------------------------------------------------------------
" ENCODING
" -------------------------------------------------------------------
set termencoding=utf-8 " make it look nice
set encoding=utf-8


" -------------------------------------------------------------------
" FILE HANDLING
" -------------------------------------------------------------------
set autowrite                " write out old file when switching between files
"set shortmess+=filmnrxoOtT   " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash  " Better Unix / Windows compatibility
set virtualedit=onemore      " allow for cursor beyond last character
set autoread                 " reload files changed on disk, i.e. via `git checkout`
set hidden                   " switch between buffers without saving
au FocusLost * :wa           " save file when Vim loses focus

au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Setting up the directories
set backupdir=~/.vim/backup " single backup directory, I hate those tilde files
set backup                  " backups are nice ...
if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile            " so is persistent undo ...
    set undolevels=1000     " maximum number of changes that can be undone
    set undoreload=10000    " maximum number lines to save for undo on a buffer reload
endif

" don't save any files when using Vim for editing crontab
if $VIM_CRONTAB == "true"
    set nobackup
    set nowritebackup
endif


" -------------------------------------------------------------------
" MISCELLANEOUS
" -------------------------------------------------------------------

" toggle listchars on or off
noremap <Leader>i :set list!<CR>

" Paste mode to prevent autoindention of pasted lines
set pastetoggle=<F2>

" yank and paste with the system clipboard
"set clipboard=unnamed

" show cursorline only in active window
if has("autocmd")
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * set cursorline
endif

" strip whitespace from all lines in file
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" reindent entire file
nmap _= :call Preserve("normal gg=G")<CR>

" resize splits when resizing the vim window
if has("autocmd")
    autocmd VimResized * exe "normal! \<c-w>="
endif

" -------------------------------------------------------------------
" SEARCHING
" -------------------------------------------------------------------
set incsearch                            " use incremental searching
set hlsearch                             " highlight search results
set ignorecase                           " ignore case when searching
set smartcase                            " only ignore case if all lower-case

highlight clear SignColumn   " SignColumn should match background
highlight clear LineNr       " Current line number row will have same background color in relative mode

" saner regexp searching
nnoremap / /\v
vnoremap / /\v

" remove search highlighting with <F3>
nnoremap <silent> <leader>/ :noh1search<CR>

" -------------------------------------------------------------------
" SPLITS
" -------------------------------------------------------------------
nnoremap <leader>v <C-w>v<C-w>l     " open a vertical split and switch
nnoremap <leader>h <C-w>s<C-w>j     " open a horizontal split and switch


" -------------------------------------------------------------------
" COMMAND LINE COMPLETION
" -------------------------------------------------------------------
set wildmenu                    " show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all
set whichwrap=b,s,h,l,<,>,[,]   " backspace and cusor key wrap too


" -------------------------------------------------------------------
" FILETYPE CONFIGURATION
" -------------------------------------------------------------------
if has("autocmd")

    " enable file type detection
    filetype on


    " syntax of these languages is fussy over tabs vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType eruby,erb setlocal ts=2 sts=2 sw=2 expandtab

    " files where I prefer 2 space tabs
    autocmd FileType js,javascript setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType twig setlocal ts=2 sts=2 sw=2 expandtab


    " spell check git commit messages
    autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us


    " start git commit message in insert mode
    autocmd BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't')


    " markdown files
    autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown setfiletype markdown
    autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
    autocmd FileType markdown setlocal tw=100


    " Ruby files
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab



    " non ruby files related to Ruby
    autocmd BufNewFile,BufRead  Gemfile,Gemfile.lock,Guardfile   setfiletype ruby
    autocmd BufNewFile,BufRead  Thorfile,config.ru,Vagrantfile   setfiletype ruby
    autocmd BufNewFile,BufRead  Berksfile,Berksfile.lock         setfiletype ruby
    autocmd BufNewFile,BufRead  Rakefile                         setfiletype ruby
    autocmd BufNewFile,BufRead  *.rake                           setfiletype rake
    autocmd BufNewFile,BufRead  *.rake set syntax=ruby


    " Python files
    let NERDTreeIgnore = ['\.pyc$', '\~$', '\.rb$']
    autocmd BufNewFile,BufRead *.py set ts=2 sts=2 sw=2 expandtab
endif


"map <silent> <leader>nt :call ToggleVExplorer()<CR>
map <silent> <leader>nt :NERDTreeToggle<CR>

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_browse_split = 4
let g:netrw_altv = ".git,.sass-cache,.jpg,.png,.svg,.jpeg"
" Default to tree mode
let g:netrw_liststyle = 3

" strip whitespace
function! StripTrailingWhitespace()
    " preperation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" shell command
function! s:RunShellCommand(cmdline)
    botright new

    setlocal buftype=nofile
    setlocal bufhidden=delete
    setlocal nobuflisted
    setlocal noswapfile
    setlocal nowrap
    setlocal filetype=shell
    setlocal syntax=shell

    call setline(1, a:cmdline)
    call setline(2, substitute(a:cmdline, '.', '=', 'g'))
    execute 'silent $read !' . escape(a:cmdline, '%#')
    setlocal nomodifiable    .
    1
endfunction

command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
" e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %

" Change directory to the current buffer when opening files.
set autochdir


" VIMRC SHORTCUTS
" -------------------------------------------------------------------
" open vimrc in new tab
nmap <leader>ev :tabedit $MYVIMRC<cr>

" automatically source .vimrc when it is saved
if has("autocmd")
    autocmd! bufwritepost .vimrc source $MYVIMRC
endif

" reload .vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

if filereadable(expand("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif
